// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cache.sql

package db

import (
	"context"
)

const deleteCacheKey = `-- name: DeleteCacheKey :exec
DELETE FROM cache WHERE key = ?
`

func (q *Queries) DeleteCacheKey(ctx context.Context, key string) error {
	_, err := q.exec(ctx, q.deleteCacheKeyStmt, deleteCacheKey, key)
	return err
}

const getCacheValue = `-- name: GetCacheValue :one
SELECT value FROM cache WHERE key = ? LIMIT 1
`

func (q *Queries) GetCacheValue(ctx context.Context, key string) (string, error) {
	row := q.queryRow(ctx, q.getCacheValueStmt, getCacheValue, key)
	var value string
	err := row.Scan(&value)
	return value, err
}

const listCache = `-- name: ListCache :many
SELECT key, value FROM cache ORDER BY key ASC
`

func (q *Queries) ListCache(ctx context.Context) ([]Cache, error) {
	rows, err := q.query(ctx, q.listCacheStmt, listCache)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cache{}
	for rows.Next() {
		var i Cache
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setCacheValue = `-- name: SetCacheValue :exec
INSERT INTO cache (key, value)
VALUES (?, ?)
ON CONFLICT(key) DO UPDATE SET value=excluded.value
`

type SetCacheValueParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) SetCacheValue(ctx context.Context, arg SetCacheValueParams) error {
	_, err := q.exec(ctx, q.setCacheValueStmt, setCacheValue, arg.Key, arg.Value)
	return err
}
