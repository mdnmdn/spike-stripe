// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (id, user_id, product_id, product_name, amount, stripe_session_id, status, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateTransactionParams struct {
	ID              string         `json:"id"`
	UserID          string         `json:"user_id"`
	ProductID       string         `json:"product_id"`
	ProductName     string         `json:"product_name"`
	Amount          int64          `json:"amount"`
	StripeSessionID sql.NullString `json:"stripe_session_id"`
	Status          string         `json:"status"`
	CreatedAt       string         `json:"created_at"`
	UpdatedAt       string         `json:"updated_at"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.exec(ctx, q.createTransactionStmt, createTransaction,
		arg.ID,
		arg.UserID,
		arg.ProductID,
		arg.ProductName,
		arg.Amount,
		arg.StripeSessionID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, user_id, product_id, product_name, amount, stripe_session_id, stripe_payment_intent_id, status, created_at, updated_at
FROM transactions
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id string) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionStmt, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.ProductName,
		&i.Amount,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionByStripeSessionID = `-- name: GetTransactionByStripeSessionID :one
SELECT id, user_id, product_id, product_name, amount, stripe_session_id, stripe_payment_intent_id, status, created_at, updated_at
FROM transactions
WHERE stripe_session_id = ?
LIMIT 1
`

func (q *Queries) GetTransactionByStripeSessionID(ctx context.Context, stripeSessionID sql.NullString) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionByStripeSessionIDStmt, getTransactionByStripeSessionID, stripeSessionID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.ProductName,
		&i.Amount,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllTransactions = `-- name: ListAllTransactions :many
SELECT id, user_id, product_id, product_name, amount, stripe_session_id, stripe_payment_intent_id, status, created_at, updated_at
FROM transactions
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListAllTransactionsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListAllTransactions(ctx context.Context, arg ListAllTransactionsParams) ([]Transaction, error) {
	rows, err := q.query(ctx, q.listAllTransactionsStmt, listAllTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.ProductName,
			&i.Amount,
			&i.StripeSessionID,
			&i.StripePaymentIntentID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionsByUserID = `-- name: ListTransactionsByUserID :many
SELECT id, user_id, product_id, product_name, amount, stripe_session_id, stripe_payment_intent_id, status, created_at, updated_at
FROM transactions
WHERE user_id = ?
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListTransactionsByUserIDParams struct {
	UserID string `json:"user_id"`
	Limit  int64  `json:"limit"`
	Offset int64  `json:"offset"`
}

func (q *Queries) ListTransactionsByUserID(ctx context.Context, arg ListTransactionsByUserIDParams) ([]Transaction, error) {
	rows, err := q.query(ctx, q.listTransactionsByUserIDStmt, listTransactionsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.ProductName,
			&i.Amount,
			&i.StripeSessionID,
			&i.StripePaymentIntentID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE transactions 
SET status = ?, updated_at = ?
WHERE id = ?
`

type UpdateTransactionStatusParams struct {
	Status    string `json:"status"`
	UpdatedAt string `json:"updated_at"`
	ID        string `json:"id"`
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.exec(ctx, q.updateTransactionStatusStmt, updateTransactionStatus, arg.Status, arg.UpdatedAt, arg.ID)
	return err
}

const updateTransactionWithStripeData = `-- name: UpdateTransactionWithStripeData :exec
UPDATE transactions 
SET stripe_payment_intent_id = ?, status = ?, updated_at = ?
WHERE stripe_session_id = ?
`

type UpdateTransactionWithStripeDataParams struct {
	StripePaymentIntentID sql.NullString `json:"stripe_payment_intent_id"`
	Status                string         `json:"status"`
	UpdatedAt             string         `json:"updated_at"`
	StripeSessionID       sql.NullString `json:"stripe_session_id"`
}

func (q *Queries) UpdateTransactionWithStripeData(ctx context.Context, arg UpdateTransactionWithStripeDataParams) error {
	_, err := q.exec(ctx, q.updateTransactionWithStripeDataStmt, updateTransactionWithStripeData,
		arg.StripePaymentIntentID,
		arg.Status,
		arg.UpdatedAt,
		arg.StripeSessionID,
	)
	return err
}
