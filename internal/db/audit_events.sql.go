// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: audit_events.sql

package db

import (
	"context"
	"database/sql"
)

const createAuditEvent = `-- name: CreateAuditEvent :exec
INSERT INTO audit_events (
    subsystem,
    event_type,
    user_id,
    information,
    payload,
    ref_id,
    ref_id2
) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateAuditEventParams struct {
	Subsystem   string         `json:"subsystem"`
	EventType   string         `json:"event_type"`
	UserID      sql.NullString `json:"user_id"`
	Information sql.NullString `json:"information"`
	Payload     sql.NullString `json:"payload"`
	RefID       sql.NullString `json:"ref_id"`
	RefId2      sql.NullString `json:"ref_id2"`
}

func (q *Queries) CreateAuditEvent(ctx context.Context, arg CreateAuditEventParams) error {
	_, err := q.exec(ctx, q.createAuditEventStmt, createAuditEvent,
		arg.Subsystem,
		arg.EventType,
		arg.UserID,
		arg.Information,
		arg.Payload,
		arg.RefID,
		arg.RefId2,
	)
	return err
}

const getAllAuditEvents = `-- name: GetAllAuditEvents :many
SELECT id, timestamp, subsystem, event_type, user_id, information, payload, ref_id, ref_id2 FROM audit_events
ORDER BY timestamp DESC
LIMIT ? OFFSET ?
`

type GetAllAuditEventsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) GetAllAuditEvents(ctx context.Context, arg GetAllAuditEventsParams) ([]AuditEvent, error) {
	rows, err := q.query(ctx, q.getAllAuditEventsStmt, getAllAuditEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Subsystem,
			&i.EventType,
			&i.UserID,
			&i.Information,
			&i.Payload,
			&i.RefID,
			&i.RefId2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditEventsByEventType = `-- name: GetAuditEventsByEventType :many
SELECT id, timestamp, subsystem, event_type, user_id, information, payload, ref_id, ref_id2 FROM audit_events
WHERE event_type = ?
ORDER BY timestamp DESC
LIMIT ? OFFSET ?
`

type GetAuditEventsByEventTypeParams struct {
	EventType string `json:"event_type"`
	Limit     int64  `json:"limit"`
	Offset    int64  `json:"offset"`
}

func (q *Queries) GetAuditEventsByEventType(ctx context.Context, arg GetAuditEventsByEventTypeParams) ([]AuditEvent, error) {
	rows, err := q.query(ctx, q.getAuditEventsByEventTypeStmt, getAuditEventsByEventType, arg.EventType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Subsystem,
			&i.EventType,
			&i.UserID,
			&i.Information,
			&i.Payload,
			&i.RefID,
			&i.RefId2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditEventsByRefID = `-- name: GetAuditEventsByRefID :many
SELECT id, timestamp, subsystem, event_type, user_id, information, payload, ref_id, ref_id2 FROM audit_events
WHERE ref_id = ?
ORDER BY timestamp DESC
LIMIT ? OFFSET ?
`

type GetAuditEventsByRefIDParams struct {
	RefID  sql.NullString `json:"ref_id"`
	Limit  int64          `json:"limit"`
	Offset int64          `json:"offset"`
}

func (q *Queries) GetAuditEventsByRefID(ctx context.Context, arg GetAuditEventsByRefIDParams) ([]AuditEvent, error) {
	rows, err := q.query(ctx, q.getAuditEventsByRefIDStmt, getAuditEventsByRefID, arg.RefID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Subsystem,
			&i.EventType,
			&i.UserID,
			&i.Information,
			&i.Payload,
			&i.RefID,
			&i.RefId2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditEventsByRefID2 = `-- name: GetAuditEventsByRefID2 :many
SELECT id, timestamp, subsystem, event_type, user_id, information, payload, ref_id, ref_id2 FROM audit_events
WHERE ref_id2 = ?
ORDER BY timestamp DESC
LIMIT ? OFFSET ?
`

type GetAuditEventsByRefID2Params struct {
	RefId2 sql.NullString `json:"ref_id2"`
	Limit  int64          `json:"limit"`
	Offset int64          `json:"offset"`
}

func (q *Queries) GetAuditEventsByRefID2(ctx context.Context, arg GetAuditEventsByRefID2Params) ([]AuditEvent, error) {
	rows, err := q.query(ctx, q.getAuditEventsByRefID2Stmt, getAuditEventsByRefID2, arg.RefId2, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Subsystem,
			&i.EventType,
			&i.UserID,
			&i.Information,
			&i.Payload,
			&i.RefID,
			&i.RefId2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditEventsBySubsystem = `-- name: GetAuditEventsBySubsystem :many
SELECT id, timestamp, subsystem, event_type, user_id, information, payload, ref_id, ref_id2 FROM audit_events
WHERE subsystem = ?
ORDER BY timestamp DESC
LIMIT ? OFFSET ?
`

type GetAuditEventsBySubsystemParams struct {
	Subsystem string `json:"subsystem"`
	Limit     int64  `json:"limit"`
	Offset    int64  `json:"offset"`
}

func (q *Queries) GetAuditEventsBySubsystem(ctx context.Context, arg GetAuditEventsBySubsystemParams) ([]AuditEvent, error) {
	rows, err := q.query(ctx, q.getAuditEventsBySubsystemStmt, getAuditEventsBySubsystem, arg.Subsystem, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Subsystem,
			&i.EventType,
			&i.UserID,
			&i.Information,
			&i.Payload,
			&i.RefID,
			&i.RefId2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditEventsBySubsystemAndType = `-- name: GetAuditEventsBySubsystemAndType :many
SELECT id, timestamp, subsystem, event_type, user_id, information, payload, ref_id, ref_id2 FROM audit_events
WHERE subsystem = ? AND event_type = ?
ORDER BY timestamp DESC
LIMIT ? OFFSET ?
`

type GetAuditEventsBySubsystemAndTypeParams struct {
	Subsystem string `json:"subsystem"`
	EventType string `json:"event_type"`
	Limit     int64  `json:"limit"`
	Offset    int64  `json:"offset"`
}

func (q *Queries) GetAuditEventsBySubsystemAndType(ctx context.Context, arg GetAuditEventsBySubsystemAndTypeParams) ([]AuditEvent, error) {
	rows, err := q.query(ctx, q.getAuditEventsBySubsystemAndTypeStmt, getAuditEventsBySubsystemAndType,
		arg.Subsystem,
		arg.EventType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Subsystem,
			&i.EventType,
			&i.UserID,
			&i.Information,
			&i.Payload,
			&i.RefID,
			&i.RefId2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditEventsByUser = `-- name: GetAuditEventsByUser :many
SELECT id, timestamp, subsystem, event_type, user_id, information, payload, ref_id, ref_id2 FROM audit_events
WHERE user_id = ?
ORDER BY timestamp DESC
LIMIT ? OFFSET ?
`

type GetAuditEventsByUserParams struct {
	UserID sql.NullString `json:"user_id"`
	Limit  int64          `json:"limit"`
	Offset int64          `json:"offset"`
}

func (q *Queries) GetAuditEventsByUser(ctx context.Context, arg GetAuditEventsByUserParams) ([]AuditEvent, error) {
	rows, err := q.query(ctx, q.getAuditEventsByUserStmt, getAuditEventsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Subsystem,
			&i.EventType,
			&i.UserID,
			&i.Information,
			&i.Payload,
			&i.RefID,
			&i.RefId2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuditEventsInDateRange = `-- name: GetAuditEventsInDateRange :many
SELECT id, timestamp, subsystem, event_type, user_id, information, payload, ref_id, ref_id2 FROM audit_events
WHERE timestamp >= ? AND timestamp <= ?
ORDER BY timestamp DESC
LIMIT ? OFFSET ?
`

type GetAuditEventsInDateRangeParams struct {
	Timestamp   string `json:"timestamp"`
	Timestamp_2 string `json:"timestamp_2"`
	Limit       int64  `json:"limit"`
	Offset      int64  `json:"offset"`
}

func (q *Queries) GetAuditEventsInDateRange(ctx context.Context, arg GetAuditEventsInDateRangeParams) ([]AuditEvent, error) {
	rows, err := q.query(ctx, q.getAuditEventsInDateRangeStmt, getAuditEventsInDateRange,
		arg.Timestamp,
		arg.Timestamp_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditEvent{}
	for rows.Next() {
		var i AuditEvent
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Subsystem,
			&i.EventType,
			&i.UserID,
			&i.Information,
			&i.Payload,
			&i.RefID,
			&i.RefId2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
