// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAuditEventStmt, err = db.PrepareContext(ctx, createAuditEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAuditEvent: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.deleteCacheKeyStmt, err = db.PrepareContext(ctx, deleteCacheKey); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCacheKey: %w", err)
	}
	if q.getAllAuditEventsStmt, err = db.PrepareContext(ctx, getAllAuditEvents); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllAuditEvents: %w", err)
	}
	if q.getAuditEventsByEventTypeStmt, err = db.PrepareContext(ctx, getAuditEventsByEventType); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuditEventsByEventType: %w", err)
	}
	if q.getAuditEventsBySubsystemStmt, err = db.PrepareContext(ctx, getAuditEventsBySubsystem); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuditEventsBySubsystem: %w", err)
	}
	if q.getAuditEventsBySubsystemAndTypeStmt, err = db.PrepareContext(ctx, getAuditEventsBySubsystemAndType); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuditEventsBySubsystemAndType: %w", err)
	}
	if q.getAuditEventsByUserStmt, err = db.PrepareContext(ctx, getAuditEventsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuditEventsByUser: %w", err)
	}
	if q.getAuditEventsInDateRangeStmt, err = db.PrepareContext(ctx, getAuditEventsInDateRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetAuditEventsInDateRange: %w", err)
	}
	if q.getCacheValueStmt, err = db.PrepareContext(ctx, getCacheValue); err != nil {
		return nil, fmt.Errorf("error preparing query GetCacheValue: %w", err)
	}
	if q.getTransactionStmt, err = db.PrepareContext(ctx, getTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransaction: %w", err)
	}
	if q.getTransactionByStripeSessionIDStmt, err = db.PrepareContext(ctx, getTransactionByStripeSessionID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionByStripeSessionID: %w", err)
	}
	if q.listAllTransactionsStmt, err = db.PrepareContext(ctx, listAllTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllTransactions: %w", err)
	}
	if q.listCacheStmt, err = db.PrepareContext(ctx, listCache); err != nil {
		return nil, fmt.Errorf("error preparing query ListCache: %w", err)
	}
	if q.listTransactionsByUserIDStmt, err = db.PrepareContext(ctx, listTransactionsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransactionsByUserID: %w", err)
	}
	if q.setCacheValueStmt, err = db.PrepareContext(ctx, setCacheValue); err != nil {
		return nil, fmt.Errorf("error preparing query SetCacheValue: %w", err)
	}
	if q.updateTransactionStatusStmt, err = db.PrepareContext(ctx, updateTransactionStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransactionStatus: %w", err)
	}
	if q.updateTransactionWithStripeDataStmt, err = db.PrepareContext(ctx, updateTransactionWithStripeData); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransactionWithStripeData: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAuditEventStmt != nil {
		if cerr := q.createAuditEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAuditEventStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.deleteCacheKeyStmt != nil {
		if cerr := q.deleteCacheKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCacheKeyStmt: %w", cerr)
		}
	}
	if q.getAllAuditEventsStmt != nil {
		if cerr := q.getAllAuditEventsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllAuditEventsStmt: %w", cerr)
		}
	}
	if q.getAuditEventsByEventTypeStmt != nil {
		if cerr := q.getAuditEventsByEventTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuditEventsByEventTypeStmt: %w", cerr)
		}
	}
	if q.getAuditEventsBySubsystemStmt != nil {
		if cerr := q.getAuditEventsBySubsystemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuditEventsBySubsystemStmt: %w", cerr)
		}
	}
	if q.getAuditEventsBySubsystemAndTypeStmt != nil {
		if cerr := q.getAuditEventsBySubsystemAndTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuditEventsBySubsystemAndTypeStmt: %w", cerr)
		}
	}
	if q.getAuditEventsByUserStmt != nil {
		if cerr := q.getAuditEventsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuditEventsByUserStmt: %w", cerr)
		}
	}
	if q.getAuditEventsInDateRangeStmt != nil {
		if cerr := q.getAuditEventsInDateRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAuditEventsInDateRangeStmt: %w", cerr)
		}
	}
	if q.getCacheValueStmt != nil {
		if cerr := q.getCacheValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCacheValueStmt: %w", cerr)
		}
	}
	if q.getTransactionStmt != nil {
		if cerr := q.getTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionStmt: %w", cerr)
		}
	}
	if q.getTransactionByStripeSessionIDStmt != nil {
		if cerr := q.getTransactionByStripeSessionIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionByStripeSessionIDStmt: %w", cerr)
		}
	}
	if q.listAllTransactionsStmt != nil {
		if cerr := q.listAllTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllTransactionsStmt: %w", cerr)
		}
	}
	if q.listCacheStmt != nil {
		if cerr := q.listCacheStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCacheStmt: %w", cerr)
		}
	}
	if q.listTransactionsByUserIDStmt != nil {
		if cerr := q.listTransactionsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransactionsByUserIDStmt: %w", cerr)
		}
	}
	if q.setCacheValueStmt != nil {
		if cerr := q.setCacheValueStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setCacheValueStmt: %w", cerr)
		}
	}
	if q.updateTransactionStatusStmt != nil {
		if cerr := q.updateTransactionStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransactionStatusStmt: %w", cerr)
		}
	}
	if q.updateTransactionWithStripeDataStmt != nil {
		if cerr := q.updateTransactionWithStripeDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransactionWithStripeDataStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                   DBTX
	tx                                   *sql.Tx
	createAuditEventStmt                 *sql.Stmt
	createTransactionStmt                *sql.Stmt
	deleteCacheKeyStmt                   *sql.Stmt
	getAllAuditEventsStmt                *sql.Stmt
	getAuditEventsByEventTypeStmt        *sql.Stmt
	getAuditEventsBySubsystemStmt        *sql.Stmt
	getAuditEventsBySubsystemAndTypeStmt *sql.Stmt
	getAuditEventsByUserStmt             *sql.Stmt
	getAuditEventsInDateRangeStmt        *sql.Stmt
	getCacheValueStmt                    *sql.Stmt
	getTransactionStmt                   *sql.Stmt
	getTransactionByStripeSessionIDStmt  *sql.Stmt
	listAllTransactionsStmt              *sql.Stmt
	listCacheStmt                        *sql.Stmt
	listTransactionsByUserIDStmt         *sql.Stmt
	setCacheValueStmt                    *sql.Stmt
	updateTransactionStatusStmt          *sql.Stmt
	updateTransactionWithStripeDataStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                   tx,
		tx:                                   tx,
		createAuditEventStmt:                 q.createAuditEventStmt,
		createTransactionStmt:                q.createTransactionStmt,
		deleteCacheKeyStmt:                   q.deleteCacheKeyStmt,
		getAllAuditEventsStmt:                q.getAllAuditEventsStmt,
		getAuditEventsByEventTypeStmt:        q.getAuditEventsByEventTypeStmt,
		getAuditEventsBySubsystemStmt:        q.getAuditEventsBySubsystemStmt,
		getAuditEventsBySubsystemAndTypeStmt: q.getAuditEventsBySubsystemAndTypeStmt,
		getAuditEventsByUserStmt:             q.getAuditEventsByUserStmt,
		getAuditEventsInDateRangeStmt:        q.getAuditEventsInDateRangeStmt,
		getCacheValueStmt:                    q.getCacheValueStmt,
		getTransactionStmt:                   q.getTransactionStmt,
		getTransactionByStripeSessionIDStmt:  q.getTransactionByStripeSessionIDStmt,
		listAllTransactionsStmt:              q.listAllTransactionsStmt,
		listCacheStmt:                        q.listCacheStmt,
		listTransactionsByUserIDStmt:         q.listTransactionsByUserIDStmt,
		setCacheValueStmt:                    q.setCacheValueStmt,
		updateTransactionStatusStmt:          q.updateTransactionStatusStmt,
		updateTransactionWithStripeDataStmt:  q.updateTransactionWithStripeDataStmt,
	}
}
